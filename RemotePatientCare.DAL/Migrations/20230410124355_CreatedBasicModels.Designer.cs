// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemotePatientCare.DAL.Data;

#nullable disable

namespace RemotePatientCare.DAL.Migrations
{
    [DbContext(typeof(RemotePatientCareDbContext))]
    [Migration("20230410124355_CreatedBasicModels")]
    partial class CreatedBasicModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RemotePatientCare.DAL.Models.CaregiverPatient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CaregiverPatients");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BeginningWorkingDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndWorkingDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.Hospital", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.HospitalAdministrator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("HospitalAdministrators");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CaregiverPatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientCaretakerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CaregiverPatientId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseUsers");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.CaregiverPatient", b =>
                {
                    b.HasOne("RemotePatientCare.DAL.Models.User", "User")
                        .WithOne("CaregiverPatient")
                        .HasForeignKey("RemotePatientCare.DAL.Models.CaregiverPatient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.Doctor", b =>
                {
                    b.HasOne("RemotePatientCare.DAL.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemotePatientCare.DAL.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("RemotePatientCare.DAL.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.HospitalAdministrator", b =>
                {
                    b.HasOne("RemotePatientCare.DAL.Models.Hospital", "Hospital")
                        .WithMany("Administrators")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemotePatientCare.DAL.Models.User", "User")
                        .WithOne("HospitalAdministrator")
                        .HasForeignKey("RemotePatientCare.DAL.Models.HospitalAdministrator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.Patient", b =>
                {
                    b.HasOne("RemotePatientCare.DAL.Models.CaregiverPatient", "CaregiverPatient")
                        .WithMany("Patients")
                        .HasForeignKey("CaregiverPatientId");

                    b.HasOne("RemotePatientCare.DAL.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");

                    b.HasOne("RemotePatientCare.DAL.Models.Hospital", "Hospital")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemotePatientCare.DAL.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("RemotePatientCare.DAL.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaregiverPatient");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.CaregiverPatient", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.Doctor", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.Hospital", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("RemotePatientCare.DAL.Models.User", b =>
                {
                    b.Navigation("CaregiverPatient");

                    b.Navigation("Doctor");

                    b.Navigation("HospitalAdministrator");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
